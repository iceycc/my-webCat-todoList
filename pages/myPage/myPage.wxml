<!--数据绑定
   1 数据在哪 必须来源与js文件中 Page的data
   2 绑定到哪去  (想绑定到哪就在哪里进行输出 用mustache语法输出)
-->
<view class="container">
    <!--小胡子语法 mustache-->
    <!--mustache可以用在
        1 类似 innerHTML() 中 就是元素标签内
        2 元素属性上 class=” {{ }} “
        不能用在标签名和属性名上
    -->
    <text>{{title}}</text>
    <text class="active {{ viewClassName }}">{{title}}</text>
    <!--
        使用字面量
        简单的运算
        三元表达式
        正确解析布尔值
    -->
    <text class="active {{ viewClassName }}">{{"啊哈哈"}}</text>
    <text class="active {{ viewClassName }}">{{111}}</text>
    <text class="active {{ viewClassName }}">{{ 1+2 }}</text>
    <text class="active {{ viewClassName }}">{{ 1+2 >0 ? "对了" : "错误" }}</text>
    <!--
        当语法解析误解了true/false
        可用{{}} 解决
    -->
    <checkbox checked="false">"false"</checkbox>
    <checkbox checked="true">"true"</checkbox>
    <checkbox checked="{{true}}">胡子true</checkbox>
    <checkbox checked="{{false}}">胡子false</checkbox>

    <!--
    条件渲染 wx:for=""
      1 明确页面结构中的循环体
      2 删除多余的的重复内容 只保留一个
      3 在剩下的这个上面加上wx:for="遍历的数据源" 数据源是数组或者对象
      4 在这个标签（循环体） 内部使用item 代表 循环的内当前的遍历的元素
      5 如果全局属性中有item这种关键词 优先使用循环内部的item
      可以使用wx:for-item="aa"起别名！！
      可以使用wx:for-index="ii" 起别名！！    -->
        <text wx:for="{{ objs }}" wx:key="index">{{item}}</text>
    <!--todolist-->
    <text>todo</text>
    <checkbox wx:for="{{todos}}" checked="{{ aaa.completed }}" wx:for-item="aaa" wx:key="index">{{item}} {{aaa.name}}</checkbox>

    <!--wx:if="" 显示或隐藏-->
</view>

